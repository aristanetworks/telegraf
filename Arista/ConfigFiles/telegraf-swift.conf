###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################

# Configuration for influxdb server to send metrics to
[[outputs.influxdb]]
  ## The full HTTP or UDP endpoint URL for your InfluxDB instance.
  ## Multiple urls can be specified as part of the same cluster,
  ## this means that only ONE of the urls will be written to each interval.
  # urls = ["udp://localhost:8089"] # UDP endpoint example
  urls = ["http://planck:8086"] # required
  ## The target database for metrics (telegraf will create it if not exists).
  database = "ServerStats" # required
  ## Retention policy to write to.
  retention_policy = ""
  ## Precision of writes, valid values are "ns", "us" (or "Âµs"), "ms", "s", "m", "h".
  ## note: using "s" precision greatly improves InfluxDB compression.
  precision = "s"

  ## Write timeout (for the InfluxDB client), formatted as a string.
  ## If not provided, will default to 5s. 0s means no timeout (not recommended).
  timeout = "10s"

  namepass = ["cpu", "disk", "diskio", "kernel", "mem", "net", "netstat", "processes", "swap", "system", "swift*", "smart*"]


###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################
# Read metrics about disk IO by device
[[inputs.diskio]]
  ## By default, telegraf will gather stats for all devices including
  ## disk partitions.
  ## Setting devices will restrict the stats to the specified devices.
  devices = ["md125", "md127", "sda", "sdb", "sdc", "sdd", "sde", "sdf", 
  "sdg", "sdh", "sdi", "sdj", "sdk", "sdl", "sdm", "sdn", "sdo", "sdp",
  "sdq", "sdr", "sds", "sdt", "sdu", "sdv","sdw", "sdx", "sdy", "sdz",
  "sdaa", "sdab", "sdac", "sdad", "sdae", "sdaf", "sdag", "sdah", "sdai",
  "sdaj", "sdak", "sdal" ]
  ## Uncomment the following line if you do not need disk serial numbers.
  skip_serial_number = true

###############################################################################
#                            SERVICE INPUT PLUGINS                            #
###############################################################################

# Statsd Server
[[inputs.statsd]]
  ## Address and port to host UDP listener on
  service_address = ":8125"
  ## Delete gauges every interval (default=false)
  delete_gauges = false
  ## Delete counters every interval (default=false)
  delete_counters = false
  ## Delete sets every interval (default=false)
  delete_sets = false
  ## Delete timings & histograms every interval (default=true)
  delete_timings = true
  ## Percentiles to calculate for timing & histogram stats
  percentiles = [90]

  ## separator to use between elements of a statsd metric
  metric_separator = "."

  ## Parses tags in the datadog statsd format
  ## http://docs.datadoghq.com/guides/dogstatsd/
  parse_data_dog_tags = false

  ## Statsd data translation templates, more info can be read here:
  ## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_INPUT.md#graphite
  templates = [
      "swift.account-auditor.* measurement* service=account-auditor,swift=swift",
      "swift.account-reaper.*.* measurement* service=account-reaper,swift=swift",
      "swift.account-reaper.* measurement* service=account-reaper,swift=swift",
      "swift.object-reconstructor.partition.update.count.* measurement.measurement.measurement.measurement.measurement.device service=object-reconstructor,swift=swift",
      "swift.object-reconstructor.partition.delete.count.* measurement.measurement.measurement.measurement.measurement.device service=object-reconstructor,swift=swift",
      "swift.object-replicator.partition.update.count.* measurement.measurement.measurement.measurement.measurement.device service=object-replicator,swift=swift",
      "swift.object-replicator.partition.delete.count.* measurement.measurement.measurement.measurement.measurement.device service=object-replicator,swift=swift",
      "swift.account-replicator.removes.* measurement.measurement.measurement.device service=account-replicator,swift=swift",
      "swift.account-replicator.*.*.* measurement* service=account-replicator,swift=swift",
      "swift.account-replicator.* measurement* service=account-replicator,swift=swift",
      "swift.account-server.*.*.* measurement.measurement.verb.measurement* service=account-server,swift=swift",
      "swift.account-server.*.* measurement.measurement.verb.measurement service=account-server,swift=swift",
      "swift.container-auditor.* measurement* service=container-auditor,swift=swift",
      "swift.container-replicator.removes.* measurement.measurement.measurement.device service=account-replicator,swift=swift",
      "swift.container-replicator.* measurement* service=container-replicator,swift=swift",
      "swift.container-server.*.*.* measurement.measurement.verb.measurement* service=container-server,swift=swift",
      "swift.container-server.*.* measurement.measurement.verb.measurement service=container-server,swift=swift",
      "swift.container-sync.*.* measurement* service=container-sync,swift=swift",
      "swift.container-sync.* measurement* service=container-sync,swift=swift",
      "swift.container-updater.* measurement* service=container-updater,swift=swift",
      "swift.object-auditor.* measurement* service=object-auditor,swift=swift",
      "swift.object-expirer.* measurement* service=object-expirer,swift=swift",
      "swift.object-reconstructor.*.*.* measurement* service=object-reconstructor,swift=swift",
      "swift.object-reconstructor.*.* measurement* service=object-reconstructor,swift=swift",
      "swift.object-replicator.partition.update.timing measurement* service=object-replicator,swift=swift",
      "swift.object-replicator.partition.delete.timing measurement* service=object-replicator,swift=swift",
      "swift.object-replicator.*.*.* measurement* service=object-replicator,swift=swift",
      "swift.object-replicator.*.* measurement* service=object-replicator,swift=swift",
      "swift.object-server.PUT.timing measurement.measurement.measurement.measurement service=object-server,swift=swift",
      "swift.object-server.PUT.*.timing measurement.measurement.measurement.device.measurement service=object-server,swift=swift",
      "swift.object-server.*.*.* measurement.measurement.verb.measurement* service=object-server,swift=swift",
      "swift.object-server.*.timing measurement.measurement.verb.measurement service=object-server,swift=swift",
      "swift.object-server.*.* measurement* service=object-server,swift=swift",
      "swift.object-server.* measurement* service=object-server,swift=swift",
      "swift.object-updater.* measurement* service=object-updater,swift=swift",
      "swift.proxy-server.*.*.*.*.* measurement.measurement.type.measurement.status.measurement* service=proxy-server,swift=swift",
      "swift.proxy-server.*.*.*.* measurement.measurement.type.verb.status.measurement service=proxy-server,swift=swift",
      "swift.proxy-server.*.* measurement.measurement.type.measurement service=proxy-server,swift=swift",
      "swift.proxy-server.* measurement* service=proxy-server,swift=swift",
      "swift.proxy-server.*.*.*.*.*.* measurement.measurement.measurement.measurement.policy.verb.status.measurement service=proxy-server,swift=swift",
      "swift.proxy-server.*.*.*.*.*.*.* measurement.measurement.measurement.measurement.policy.measurement.status.measurement* service=proxy-server,swift=swift",
      "swift.tempauth.*.* measurement.measurement.reseller.measurement service=tempauth,swift=swift",
      "measurement* swiftcatchall=true",
  ]

  ## Number of UDP messages allowed to queue up, once filled,
  ## the statsd server will start dropping packets
  allowed_pending_messages = 10000

  ## Number of timing/histogram values to track per-measurement in the
  ## calculation of percentiles. Raising this limit increases the accuracy
  ## of percentiles but also increases the memory usage and cpu time.
  percentile_limit = 1000
